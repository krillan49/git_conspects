puts '                           Merge Request (MR) в GitLab (например для ревью кода)'

# https://docs.gitlab.com/user/project/merge_requests/creating_merge_requests/


# Доступность мёрдж реквестов определяется наличием кнопки `Merge requests` во вкладке `Code` в левой части интерфейса. В некоторых репозиториях деактивирована фича мёрдж реквестов. Если вы не видите кнопку для них, то нужно активировать эту фичу в `Settings` -> `General` -> `Visibility, project features, permissions` -> `Merge requests`

# Чтобы назначить ревьюера, он должен быть участником проекта с правами Developer или выше. Проверить роли можно в `Project` ➝ `Members`

# Если не видно поле `Reviewers`, возможно, используется старая версия GitLab или другой рабочий процесс (например, с Assignee вместо Reviewer - это разные поля)


# 1. Если это новая ветка (например, feature/add-new-button), сначала нужно запушь её на GitLab:
# $ git push origin feature/add-new-button

# 2. Перейти в нужный репозиторий проекта в раздел `Repository` → `Branches` или просто открыть главную страницу репозитория.

# 3. После пуша новой ветки GitLab обычно показывает баннер: "You pushed to feature/add-new-button. Create a merge request?". Нажать "Create merge request". 
# Если баннера нет, то в меню: `Merge requests` → `New merge request`
# В настройках рквеста можно выбрать:
# `Source branch` – твоя ветка (например, feature/add-new-button)
# `Target branch` – куда мёржить (чаще всего main, master или develop)
# Нажми `Compare branches and continue`

# 4. Заполнить информацию о MR:
# Title             - кратко, что делает MR (например, Add new button to navbar)
# Description       - что было сделано, зачем, ссылки на тикеты (Jira, GitLab Issues и т.п.)
# Assign            - назначь себя или ревьюера
# Reviewer(s)       - выберать ревьюеров, если нужно
# Labels, Milestone - по желанию

# 5. Нажать "Create merge request"
# После этого MR появится в списке `Merge Requests` и будет доступен для кода-ревью

# 6. Ревью и обсуждение
# Потом можно вносить новые правки, коммитить, пушить и изменения из них подтянутся в MR автоматически.

# 7. Дополнительно
# Если настроены CI/CD пайплайны, они запустятся автоматически.
# Можно обсуждать MR в комментариях.
# После аппрува ревьюером можно нажать "Merge", если разрешено.



puts '                              ДСМЛ. Ревью кода: памятка для разработчика'

# Ревью кода - это просмотр кода коллегой для его улучшения и устранения возможных ошибок. Нужно для:
# 1. Обмен знаниями чтобы лучше разобраться в проекте
# 2. Улучшение консистентности и читаемости кода
# 3. Уменьшение числа случайных ошибок

# Правила коммуникации при ревью кода
# 1. Будьте вежливы, предполагайте лучшие намерения собеседника
# 2. Говорите о коде, не о собеседнике
# 3. Если код в общем улучшает здоровье кодовой базы - его стоит принять

# Как отправить код на ревью (Работа ведётся с помощью т.н. мёрдж реквестов.)
# 1. Выбрать задачу.
# 2. Создать ветку в git: git checkout -b . Заместо нужно выбрать осмысленное название, чтобы задачу возможно было найти по названию ветки.
# 3. Написать код, закоммитить в ветку: git commit -a -m "My message"
# 4. Запушить ветку в репозиторий: git push -u origin .
# 5. Создать merge request по ссылке в терминале (документация, если не получается).
# 6. Просмотреть свои изменения кода в мёрдж реквесте на вкладке Changes
# 7. Запросить ревью кода, поставив ответственного под "Reviewer" в правой части экрана
# 8. Внести правки по комментариям и исправлениям
# 9. Получить одобрение мёрдж реквеста (Approve)
# 10. Влить merge request в master



puts '                                     Ревью от нескольких человек'

# Чтобы добавить ревьюера (например 2го) в уже существующий Merge Request на GitLab:


# 1. Открыть Merge Request, в который нужно добавить ревьюера. В правой колонке найти секцию `Reviewers`. Нажать значок "карандаш" рядом с "Reviewers"


# 2а. (Новые версии Гитлаб)

# а) Через веб клиент:
# В выпадающем списке выбрать нужного пользователя (или нескольких)
# Нажать "Save changes"
# После этого GitLab отправит уведомления этим людям, и они смогут оставить review

# б) Через терминал (GitLab CLI glab):
# $ glab mr update <MR_ID> --reviewer username1,username2
# <MR_ID>             - заменить на номер или URL Merge Request
# username1,username2 - заменить на логины пользователей в GitLab


# 2б. (Старые версии GitLab CE/EE) Если при добавлении ревьюеров не удаётся выбрать сразу двух, новый ревьюер заменяет старого, нет кнопки "Save changes", то, скорее всего:
# Проект использует устаревший механизм Assignée вместо Reviewers. В старых или нестандартно настроенных GitLab-проектах может использоваться только поле Assignee, и одновременно может быть выбран только один человек.
# Тогда стоит переключить рабочий процесс на использование Reviewers (если доступно) или добавить ревьюеров в комментариях / через упоминания.

# Упоминать/тегать ревьюеров вручную в комментариях к MR по их @username, это неофициально, но эффективно, они получат уведомление и смогут сделать ревью, даже если не указаны как Reviewer. Тоесть просто открыть MR и в поле комментария (или Description MR) написать сообщени, упомянув пользователя или нескольких. Потом нажать `Comment` и эти пользователи получит уведомление по email (если включено), в самом GitLab, в Slack (если настроена интеграция). Например:
# `@user1 @user2 прошу посмотреть MR`
# `@ivanov @petrov @sidorov нужен ваш фидбэк`

# GitLab показывает и позволяет тегать только участников проекта или группы. Если нужного пользователя нет в списке при вводе `@` в GitLab, то он не добавлен в проект. 
# Добавь пользователя в проект:
# Перейти в проект → "Project information" → "Members".
# Нать "Invite members".
# Ввести его ник (или email). Например в URL: https://gitlab.com/ivan_petrov ник это ivan_petrov.
# Выберать его роль (например, Developer или Reporter).
# Нажмать "Invite"

# После этого он появится в списке при @