puts '                         GitHub(загрузка копии чужого репозитория, не подходит для форков?)'

# (!!! Для коммитов чужоей реп на гитхабе ниже )

# Для клонирования себе репозитория можно просто его скачать: нажать code(зеленая кнопка справа таблицы) и затем Download ZIP, либо клонировать через консоль:

# > git clone https://github.com/username/rep_name.git   - клонирование(перенос с сервера на комп) репозитория, URL адрес находится в зеленой кнопке code.
# Добавляется вмсете с папкой название которой == названию репозитория на github. Сразу же будет папка .git(соотв git init не нужен), подключен к репозиторию github

# > git clone https://github.com/username/rep_name.git fold_name  - можно указать другое название папки, тк по умолчанию название будет как у репозитория на гитхабе с которого клонировали


# > git pull                    - добавляем из репозитория все изменения которые были внесены в проект(которых у нас нет локально). Нужно для того чтобы докачать то что делали другие сотрудники. Обычно первое с чего начинают рабочий день. Имя сервера есть в папке .git
# > git pull origin master      - можно указать репозиторий и ветку если нужно

# Если используем git pull уже после того как внесли новые изменения в локальный репозиторий и сделали новый коммит, то выведет текстовый редактор и попросит смежить - нужно ввести текст это будет текст сообщения для коммита с мержем и потом нажать 2 раза ctrl+c и написать :wq! и нажать энтер



puts '                         GitHub(Fork, Pull Request - изменения в чужой репозиторий)'

# https://docs.github.com/en/get-started/quickstart/contributing-to-projects

# Минигайд про пулл реквесты:
# https://jeka.by/post/1053/github-send-PR-to-other-repository/

# Fork(создадим копию проекта с которого сможем отправлять изменения):
# 1. Заходим на необходимый чужой репозиторий, нажимаем справа вверху 'Fork' -> '+ Create a new fork' - создается копия этого репозитория в нашем Гитхаб хранилище
# 2. Клонируем эту копию из своего Гитхаб:
# > git clone https://github.com/username/rep_name.git
# 3. Вносим изменения в склонированный проет, пушим. Далее автору ставятся от этом пометки в поле fork.

# Pull Request(отправим изменения с нашей копии автору):
# 1. Нажимаем на 'Contribute' справа вверху(под зеленой кнопкой 'Code') -> 'Open Pull Request' откроются настройки(из какой ветки какого репозитория в какие, все изменения)
# 2. Нажимаем 'Create Pull Request' и указываем комментарии к изменениям которые внесли, нажимаем 'Create Pull Request' и теперь на вкладке 'Pull Request' у нас появилась отметка

# Автор мержит изменения:
# 1. Приходит уведомление(на вкладке с колокольчиком), открываем смотрим(кнопка 'Review changes' - написать ответ) 'Merge Pull Request' - слияние репозиториев(принять пул реквест)

# В нашем проекте по той же кнопке fork можно посмотреть кто себе форкнул. Можем принять или не принять изменения.



puts '                        GitHub(Fork, Pull Request - синхронизация с чужим репозиторием)'

# https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork

# Синхронизируйте свое ответвление репозитория, чтобы поддерживать его в актуальном состоянии с вышестоящим репозиторием.


# Вариант 1. Синхронизация ответвления ветки из веб-интерфейса:
# а. На GitHub перейдите на главную страницу ответвленного репозитория, который вы хотите синхронизировать с вышестоящим репозиторием
# б. Над списком файлов выберите раскрывающееся меню 'Sync fork'
# в. Просмотрите сведения о коммитах из вышестоящего репозитория, затем нажмите 'Update branch'


# Вариант 2. Синхронизация ветки форка из командной строки:

# 1. Прежде чем вы сможете синхронизировать свой форк с репозиторием upstream, вы должны настроить удаленный, который указывает на репозиторий upstream в Git
# а. Перечислите текущий настроенный удаленный репозиторий для вашего форка.
# $ git remote -v
#=> origin  https://github.com/YOUR-USERNAME/YOUR-FORK.git (fetch)
#=> origin  https://github.com/YOUR-USERNAME/YOUR-FORK.git (push)
# б. Укажите новый удаленный вышестоящий репозиторий, который будет синхронизирован с форком.
# $ git remote add upstream https://github.com/ORIGINAL-OWNER/ORIGINAL-REPOSITORY.git
# в. Проверьте новый репозиторий, который вы указали для своего форка.
# $ git remote -v
#=> origin    https://github.com/YOUR-USERNAME/YOUR-FORK.git (fetch)
#=> origin    https://github.com/YOUR-USERNAME/YOUR-FORK.git (push)
#=> upstream  https://github.com/ORIGINAL-OWNER/ORIGINAL-REPOSITORY.git (fetch)
#=> upstream  https://github.com/ORIGINAL-OWNER/ORIGINAL-REPOSITORY.git (push)

# 2. Извлечь ветки и соответствующие им коммиты из репозитория upstream. Коммиты в BRANCH-NAME будут сохранены в локальной ветке upstream/BRANCH-NAME.
# $ git fetch upstream
#=> remote: Counting objects: 75, done.
#=> remote: Compressing objects: 100% (53/53), done.
#=> remote: Total 62 (delta 27), reused 44 (delta 9)
#=> Unpacking objects: 100% (62/62), done.
#=> From https://github.com/ORIGINAL-OWNER/ORIGINAL-REPOSITORY
#=>  * [new branch]      main     -> upstream/main

# 3. Проверьте локальную ветку по умолчанию вашего форка — в данном случае мы используем main.
# $ git checkout main
#=> Switched to branch 'main'

# 4. Объедините изменения из ветки по умолчанию upstream, в данном случае upstream/main, в вашу локальную ветку по умолчанию. Это синхронизирует ветку по умолчанию вашего форка с репозиторием upstream, не теряя локальные изменения.
# $ git merge upstream/main
#=> Updating a422352..5fdff0f
#=> Fast-forward
#=>  README                    |    9 -------
#=>  README.md                 |    7 ++++++
#=>  2 files changed, 7 insertions(+), 9 deletions(-)
#=>  delete mode 100644 README
#=>  create mode 100644 README.md
# Если в вашей локальной ветке не было уникальных коммитов, Git выполнит ускоренную перемотку
# $ git merge upstream/main
#=> Updating 34e91da..16c56ad
#=> Fast-forward
#=>  README.md                 |    5 +++--
#=>  1 file changed, 3 insertions(+), 2 deletions(-)
# Если в вашей локальной ветке были уникальные коммиты, вам может потребоваться разрешить конфликты

# Синхронизация вашего форка обновляет только вашу локальную копию репозитория. Чтобы обновить ваш форк на GitHub.com, вы должны отправить/запушить свои изменения

# 5. Коммиты в наш синхронизированный репозиторий
# $ git push
# Далее, чтобюы залить их в целевой, нужно сделать Pull Request

# 6. Подтянуть изменения из чужого(целевого) синхронизированного репозитория
# $ git pull upstream main



puts '                            GitHub(Прямой доступ в репозиторий для контрибутора)'

# 1. Перейдите в настройки вашего репозитория
# 2. Выберите вкладку "Collaborators"
# 3. Добавьте пользователя в "Manage access", указав его имя пользователя или email
# 4. Настройка доступа: Убедитесь, что добавляемый контрибьютор имеет соответствующий уровень доступа. Например, роль "Collaborator" даст возможности для выполнения git pull, git push и других команд.



puts '                                Мерж из форкнутого репозитори на свой форк'

# ???? Херня какая-то?
# 1 актуализируй у себя локально main, заходишь на main и
# $ git pull
# 2 заходишь на ветку с выполненной задачей и пишешь
# $ git merge --no-ff main
















#
