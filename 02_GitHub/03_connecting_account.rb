puts '                            Подключение к своему аккаунту с разных компьютеров'

# Можно подключиться к одному и тому же репозиторию на GitHub с двух компьютеров как владелец или по SSH или HTTPS:
# 1. Для использования SSH, нужно создать SSH-ключ на каждом компьютере и добавить их в аккаунт GitHub. Использование SSH дает большую безопасность и не нужно вводить пароль каждый раз
# 2. Для подключения по HTTPS понадобятся просто логин и пароль GitHub.

# Для любого из этих способов нужно предварительно настроить имя пользователя и электронную почту для Git (для винды без кавычек) на обоих компьютерах(используйте информацию, связанную с вашим GitHub аккаунтом):
# $ git config --global user.name "Ваше Имя"
# $ git config --global user.email "ваш_адрес@example.com"



puts '                                       Настройка доступа с помощью SSH'

# При авторизация через SSH  - не нужно вводить логин и пароль


# 1. (Для *nix систем)  Для настройки SSH - на каждом компьютере нужно:

# Создайть SSH-ключ (его еще нет):
# $ ssh-keygen -t ed25519 -C "ваша_почта@example.com"            - обычный вариант
# $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"        - если используется старая версия Git и не работает обычный вариант, то возможно придется использовать этот с `rsa` вместо `ed25519`
# Нажмите Enter, чтобы принять путь по умолчанию и затем введите пароль (по желанию).

# Добавьте SSH-ключ в ssh-agent:
# $ eval "$(ssh-agent -s)"
# $ ssh-add ~/.ssh/id_ed25519         - обычный вариант
# $ ssh-add ~/.ssh/id_rsa             - если используется старая версия Git

# Скопируйте SSH-ключ:
# $ cat ~/.ssh/id_ed25519.pub          - обычный вариант
# $ clip < ~/.ssh/id_rsa.pub           - если используется старая версия Git

# На GitHub, в «Settings» → «SSH and GPG keys» → «New SSH key», и вставьте ключ.

# На обоих компьютерах клонируйте репозиторий


# 2. (Для Виндоус)  Для настройки SSH - на каждом компьютере нужно:

# Чтобы SSH работал нужно сгенерировать ключ:
# а.  C:\Program Files\Git\usr\bin\ssh-keygen.exe  - программа для генерации ключей
# б.  C:\Users\имя_пользователя  - ищем или создаем тут каталог .ssh - в итоге получается путь например C:\Users\User\.ssh\
# в.  Запускаем ssh-keygen.exe(выход Ctrl+C) и вводим в нее наш путь C:\Users\User\.ssh\id_rsa, если он не стоит по умолчанию   (ключи можно генерить и в самом гитхабе)
# г.  Далее спрашивает passphrase, лучше ее не вводить чтобы потом каждый раз не спрашивало
# д.  В директории .ssh появилось 2 фаила id_rsa (секретный ключ) и id_rsa.pub (публичный ключ)
# е.  На GitHub, в «Settings» → «SSH and GPG keys» → «New SSH key» вводим название(любое) и копируем ключ(содержимое фаила id_rsa.pub), далее вводим пароль от Git - ключ создан.

# Теперь например на странице с подсказками после создания репозитория есть ссылка на его ssh соотв можно его клонировать:
# > git clone git@github.com:username/rep_name.git
# На вопрос вводим yes - это значит что публичный ключ гитхаба будет добавлен к нам



puts '                             Настройка доступа с помощью HTTPS аутентификации'

# Когда клонируется репозиторий, используется HTTPS ссылка. Например:
# $ git clone https://github.com/username/repository.git

# При первом "пуше" или "пуле" запросит ввести свои имя пользователя и пароль GitHub

# Но если включена двухфакторная аутентификация (2FA), нелья использовать свой пароль от GitHub. Вместо этого нужно создать персональный токен доступа:
# 1. На GitHub в *Settings* -> *Developer settings*(в самом низу) -> *Personal access tokens* -> кнопка *Generate new token*
# 2. Выбрать необходимые права доступа и создать токен.
# 3. Нужно скопировать токен, так как он будет доступен только один раз.
# После этого, когда при "пуше" или "пуле" запросит ввести свои имя пользователя и пароль,  вместо пароля используется этот персональный токен доступа.


# Чтобы не вводить имя и токен каждый раз, можно использовать кеширование учетных данных. Так учетные данные будут сохранены, и их не придется вводить повторно:
# $ git config --global credential.helper cache     - кэшируется в памяти и потому при следующем включении снова надо вводить ??
# $ git config --global credential.helper store     - хранить в конфигурационном файле














#
