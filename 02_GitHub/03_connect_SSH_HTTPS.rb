puts '                            Подключение к своему аккаунту с разных компьютеров'

# Можно подключиться к одному и тому же репозиторию на GitHub с двух компьютеров как владелец или по SSH или HTTPS:
# 1. Для использования SSH, нужно создать SSH-ключ на каждом компьютере и добавить их в аккаунт GitHub. Использование SSH дает большую безопасность и не нужно вводить логин пароль каждый раз
# 2. Для подключения по HTTPS понадобятся просто логин и пароль GitHub.

# Для любого из этих способов нужно предварительно настроить имя пользователя и электронную почту для Git (для винды без кавычек) на обоих компьютерах(используйте информацию, связанную с вашим GitHub аккаунтом):
# $ git config --global user.name "Ваше Имя"
# $ git config --global user.email "ваш_адрес@example.com"



puts '                                     Настройка доступа с помощью SSH'

# 1а. Генерация SSH-ключа для *nix систем:

# Создать SSH-ключ (его еще нет):
# $ ssh-keygen -t ed25519 -C "ваша_почта@example.com"      - стандартный вариант
# $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"  - если старая версия Git и не работает стандартный вариант

# (?? хз зачем не делал ??) Добавьте SSH-ключ в ssh-agent:
# $ eval "$(ssh-agent -s)"
# $ ssh-add ~/.ssh/id_ed25519         - обычный вариант
# $ ssh-add ~/.ssh/id_rsa             - если используется старая версия Git

# Скопируйте SSH-ключ:
# $ cat ~/.ssh/id_ed25519.pub          - обычный вариант
# $ clip < ~/.ssh/id_rsa.pub           - если используется старая версия Git


# 1б. Генерация SSH-ключа для Виндоус:

# C:\Program Files\Git\usr\bin\ssh-keygen.exe  - программа для генерации ключей
# C:\Users\имя_пользователя  - ищем или создаем тут каталог .ssh - в итоге получается путь, например "C:\Users\User\.ssh\"
# Запустить ssh-keygen.exe (выход Ctrl+C) и ввести в нее наш путь "C:\Users\User\.ssh\id_rsa", если он не стоит по умолчанию. Либо запустить ssh-keygen в терминале Гита.


# 2. На GitHub → «Settings» → «SSH and GPG keys» → «New SSH key» → вставить ключ(содержимое фаила id_rsa.pub) и назвать его


# 3. Клонировать репозиторий или настроить склонированный ранее по HTTPS

# а) Чтобы использовать доступ по ssh-ключу к репозиторию, нужно его клонировать по ssh-ссылке:
# $ git clone git@github.com:username/rep_name.git
# На вопрос вводим "yes" - это значит что публичный ключ гитхаба будет добавлен к нам

# б) Чтобы использовать доступ по ssh-ключу к репозиторию, можно настроить Git для использования SSH для конкретного репозитория, ноторый был ранее склонирован по HTTPS:
# Перейти в каталог клонированного репозитория и изменить URL удаленного репозитория (remote URL) с HTTPS на SSH. (Git использует URL удаленного репозитория, чтобы понять, как подключиться к серверу.  Команда `git remote set-url` изменяет этот URL с HTTPS на SSH. Когда вы делаете `git fetch`, `git push`, `git pull` и т.д., Git использует URL, чтобы определить, как связаться с удаленным репозиторием. Если URL начинается с `git@github.com:`, Git будет использовать SSH для подключения)
# $ git remote set-url origin git@github.com:YOUR_USERNAME/YOUR_REPOSITORY.git


# 4. Если все настроено правильно, гит не попросит пароль, и будет использовать SSH для аутентификации.



puts '                             Настройка доступа с помощью HTTPS аутентификации'

# Когда клонируется репозиторий, используется HTTPS ссылка. Например:
# $ git clone https://github.com/username/repository.git

# При первом "пуше" или "пуле" запросит ввести свои имя пользователя и пароль GitHub

# Но если включена двухфакторная аутентификация (2FA), нелья использовать свой пароль от GitHub. Вместо этого нужно создать персональный токен доступа:
# 1. На GitHub в *Settings* -> *Developer settings*(в самом низу) -> *Personal access tokens* -> кнопка *Generate new token*
# 2. Выбрать необходимые права доступа и создать токен.
# 3. Нужно скопировать токен, так как он будет доступен только один раз.
# После этого, когда при "пуше" или "пуле" запросит ввести свои имя пользователя и пароль,  вместо пароля используется этот персональный токен доступа.


# Чтобы не вводить имя и токен каждый раз, можно использовать кеширование учетных данных. Так учетные данные будут сохранены, и их не придется вводить повторно:
# $ git config --global credential.helper cache     - кэшируется в памяти и потому при следующем включении снова надо вводить ??
# $ git config --global credential.helper store     - хранить в конфигурационном файле














#
