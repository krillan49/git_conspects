puts '                                        Git(основные команды)'

# > git status                       - показывает информацию о наших фаилах: на какой мы сейчас ветке находимся, какие фаилы добавлены в стадию ожидания/не добавлены/созданы новые/изменены(modified)


# > git checkout -- .                -  удаляем все недобавленные в стадию ожидания(add) изменения
# > git checkout -- index.html       -  если фаил index.html еще не добавлен в стадию ожидания возвращаем его на момент до изменений(предыдущий коммит)


# > git add .                      - добавить все фаилы и папки относительно текущей(кроме .git) в стадию ожидания комита. Добавляется только если есть чтото отличное от последнего коммита
# > git add index.html             - добавить конкретный фаил index.html
# > git add css/                   - добавить конкретную папку с ее содержимым
# > git add css/style.css          - конкретный фаил из конкретной папки
# > git add *.html                 - все фаилы проекта с расширением html
# > git add css/*                  - все фаилы из папки
# > git add css/*.html             - все фаилы с расширением html из папки css(только самой папки а не ее внутренних папках)
# > git add css/**/*.html          - все фаилы с расширением html из папки css и ее дочерних папок
# > git add !css/style.css         - все фаилы из папки css кроме фаила style.css
# > git add !index.html            - все фаилы проекта кроме данного


# > git rm --cached index.html      - удалить фаил(ы) из стадии ожидания(используется синтаксис как в add)
# > git reset index.html            - (? тоже самое ?)


# > git commit -m "текст комментария"     - добавляет все из стадии ожидания в локальное хранилище и подписывает их комментарием


# > git log                      - выводит информацию о коммитах(сверху более поздние) и коментарии к ним (q - выйти)
# > git log --oneline            - выводит информацию о коммитах в сокращеннной форме, каждый коммит в одну строку
# HEAD - говорит о том где мы находимся
# По-умолчанию Git посылает вывод своих комманд на программу-pager. По-умолчанию это программа less. Выйти из less можно пятью способами: q, Q, :q, :Q и ZZ.

# > git reflog                   - Похоже на 'git log --oneline', но у каждого элемента есть индекс 'HEAD@{индекс}', например чтобы найти тот, перед которым всё сломалось


# > git checkout 7732aa8          - возвращает проект(все его фаилы соответсвующе меняются) на версию/стадию данного коммита. 7732aa8 - это id коммита из git log --oneline или первые 7 символов из git log. Когда мы откатываемся на этот коммит создается точка возврата. (В этом режиме лучше просто просмвтривать а не изменять, тк может нарушится структура и последовательность и все превратится в кашу)
# > git checkout master           - возвращаем наш проект на версию самого последнего коммита
# > git checkout main             - возвращаем наш проект на версию самого последнего коммита, если главная ветка переименована


# > git revert 8a3eb8b            - отменяет все изменения внесенные этим коммитом, сам коммит при этом остается(соотв его действие можно будет вернуть) + создает новый коммит-revert. Так же создает/меняет фаил COMMIT_EDITMSG в папке .git и открывает его. Либо открывает его в терминале в редакторе vim(выход - :wq)


# > git reset 7e0a953 --hard       - удаляет все коммиты после данного не включительно и возвращает проект к стадии данного коммита
# > git reset 7e0a953              - без --hard не отменяет действие удаленных коммитов, те не изменяет фаилы, а лишь только удаляет коммит и все поэтому лучше использовать --hard чтобы не испортить проект
# > git reset --hard HEAD^1        - удаляем 1 последний коммит и возвращаемся к предыдущему. Соотв при других цифрах можно откатиться на 2, 3 итд.
# > git reset --soft HEAD^1        -  удаляем 1 коммит, но оставляем фаилы измененными и добавленными в стэйдж(add).
# > git reset HEAD@{index}         -  где индекс можно посмотреть в 'git reflog'
















# 
