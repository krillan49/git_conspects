puts '                              Информационные команды относительно проекта'

# > git status                       - показывает информацию о наших фаилах: на какой мы сейчас ветке находимся, какие фаилы добавлены в стадию ожидания/не добавлены/созданы новые/изменены(modified)

# > git log                 - выводит информацию о коммитах(сверху более поздние) и коментарии к ним (q - выйти) для текущей ветки
# $ git log some            - выведет инфу о коммитах для ветки some (чтобы глянуть из другой ветки)
# $ git log -6              - выведет инфу только о 6 последних коммитах
# > git log --oneline       - выводит информацию о коммитах в сокращеннной форме, каждый коммит в одну строку
# $ git log some --oneline  - выведет инфу о коммитах для ветки some в сокращенной форме
# HEAD - говорит о том где мы находимся
# По-умолчанию Git посылает вывод своих комманд на программу-pager. По-умолчанию это программа less. Выйти из less можно пятью способами: q, Q, :q, :Q и ZZ.
# $ git log --oneline --graph  - дополнительно показывает слияния веток

# > git reflog                   - Похоже на 'git log --oneline', но у каждого элемента есть индекс 'HEAD@{индекс}', например чтобы найти тот, перед которым всё сломалось



puts '                                      Изменения до стадии ожидания'

# $ git diff                         -  в терминале выведет все изменения что внесены проект

# > git checkout -- .                -  удаляем все недобавленные в стадию ожидания(add) изменения
# > git checkout -- index.html       -  если фаил index.html еще не добавлен в стадию ожидания возвращаем его на момент до изменений(предыдущий коммит)



puts '                                         Стадия ожидания (add)'

# Индекс / staging area - является промежуточной областью, где изменения фиксируются (тоесть гит начинает следить за изменениями в этих фаилах) перед выполнением команды `git commit`, оответсвенно термин "добавить в индекс / добавить в staging area" относится к процессу подготовки изменений к фиксации (commit).

# 1. Добавить в стадию ожидания (добавляется только то что отличнается от последнего коммита):

# > git add .                      - добавить все фаилы и папки относительно текущей(кроме .git) в стадию ожидания комита.
# > git add index.html             - добавить конкретный фаил index.html
# > git add css/                   - добавить конкретную папку с ее содержимым
# > git add css/style.css          - конкретный фаил из конкретной папки
# > git add *.html                 - все фаилы проекта с расширением html
# > git add css/*                  - все фаилы из папки
# > git add css/*.html             - все фаилы с расширением html из папки css(только самой папки а не ее внутренних папках)
# > git add css/**/*.html          - все фаилы с расширением html из папки css и ее дочерних папок
# > git add !css/style.css         - все фаилы из папки css кроме фаила style.css
# > git add !index.html            - все фаилы проекта кроме данного


# 2. Удалить что либо из области подготовки:

# $ git restore --staged file.some     - удалить фаил file.some
# $ git restore --staged .             - удалить все фаилы

# (?? Хз что это за варики ?? Потом проверить по чатботу)
# > git rm --cached index.html      - удалить фаил(ы) из стадии ожидания(используется синтаксис как в add), --cached нужно чтобы сами фаилы не удалились из проекта, а только из репозитория
# > git reset index.html            - (? тоже самое ?)



puts '                                                 commit'

# Нужно залогиниться перед тем как сделать коммит, тк у коммита должен быть автор

# 1. Коммит добавляет все из стадии ожидания в локальное хранилище (и подписывает их комментарием ? флаг -m ?)

# > git commit -m "текст комментария"     - сделать коммит с комментарием "текст комментария"

# $ git commit -a                         - сделать коммит со всеми изменениями в том числе и не добавленными в стадию ожидания, но не добавит в коммит новые фаилы(в том числе и переименнованные, просто удалит старые версии), если их нет в стадии ожидания, тоесть добавляет только исправления в существующх фаилах

# > git commit -am "текст комментария"    - обе опции


# 2. Откатить проект до определенных коммитов (все фаилы проекта соответсвующе меняются на те версии), не удаляя коммиты выше. Когда мы откатываемся на этот коммит создается точка возврата. В этом режиме лучше просто просмвтривать и ничего не изменять, тк может нарушится структура и последовательность коммитов.
# Для обозначения коммита можно использовать:
# id коммита, например 7732aa8, который можно посмолтреть через команду "git log --oneline" или первые 7 символов из "git log".

# > git checkout 7732aa8          - возвращает проект на версию/стадию данного коммита.
# > git checkout master           - возвращаем наш проект на версию самого последнего коммита
# > git checkout main             - возвращаем наш проект на версию самого последнего коммита, если главная ветка переименована


# 3. Удаление коммитов.

# > git revert 8a3eb8b            - отменяет все изменения внесенные этим коммитом, сам коммит при этом остается(соотв его действие можно будет вернуть) + создает новый коммит-revert. Так же создает/меняет фаил COMMIT_EDITMSG в папке .git и открывает его. Либо открывает его в терминале в редакторе vim(выход - :wq)

# > git reset 7e0a953 --hard       - удаляет все коммиты после данного не включительно и возвращает проект к стадии данного коммита
# > git reset 7e0a953              - без --hard не отменяет действие удаленных коммитов, те не изменяет фаилы, а лишь только удаляет коммит и все поэтому лучше использовать --hard чтобы не испортить проект
# > git reset --hard HEAD^1        - удаляем 1 последний коммит и возвращаемся к предыдущему. Соотв при других цифрах можно откатиться на 2, 3 итд.
# > git reset --soft HEAD^1        -  удаляем 1 коммит, но оставляем фаилы измененными и добавленными в стэйдж(add).
# > git reset HEAD@{index}         -  где индекс можно посмотреть в 'git reflog'
















#
